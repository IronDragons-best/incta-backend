generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_s4rwqf8kGCOU@ep-fancy-cloud-abhyqfjt-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

model File {
  id         Int           @id @default(autoincrement())
  filename   String
  s3Key      String        @unique
  s3Bucket   String
  url        String
  mimeType   String
  size       Int
  type       FileType      @default(PUBLIC)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  postId     Int
  uploadedBy Int
  requests   FileRequest[]

  @@index([uploadedBy])
  @@index([postId])
  @@map("file")
}

model FileUser {
  id         Int           @id @default(autoincrement())
  filename   String
  s3Key      String        @unique
  s3Bucket   String
  url        String
  mimeType   String
  size       Int
  type       FileType      @default(PUBLIC)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     Int           @unique
  uploadedBy Int
  requests   FileRequest[]

  @@index([uploadedBy])
  @@map("fileUser")
}

model FileRequest {
  id          Int               @id @default(autoincrement())
  fileId      Int?
  fileUserId  Int?
  status      FileRequestStatus @default(APPROVED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  requestedBy Int

  file     File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileUser FileUser? @relation(fields: [fileUserId], references: [id], onDelete: Cascade)

  @@map("file_request")
}

enum FileType {
  PUBLIC
  PAID
}

enum FileRequestStatus {
  APPROVED
  DENIED
}
